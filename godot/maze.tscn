[gd_scene load_steps=12 format=3 uid="uid://bavxhshgx2cko"]

[ext_resource type="Script" path="res://global.gd" id="1_7nmve"]
[ext_resource type="Material" uid="uid://d2bw25f21qhcs" path="res://wall_material.tres" id="2_f5y5r"]
[ext_resource type="Texture2D" uid="uid://cqg3fkbs80opd" path="res://images/neon_border_small.png" id="3_jycee"]
[ext_resource type="Texture2D" uid="uid://cfs3nkd5x5m5a" path="res://images/arrow_small.png" id="4_nk2py"]

[sub_resource type="GDScript" id="GDScript_lisen"]
script/source = "extends Probe

func _ready():
	self.reset()

func _input(event):

	if event.is_action_pressed(\"Fwd\"):
		var target = self.target_pos(\"Front\")
		# print(\"Pos%s target %s [b: %s, w: %s]\" % [self.position, target, %MapNode.is_blocked(target), %MapNode.is_walkable(target)] )
		
		if %MapNode.is_walkable(target):
			self.move_smooth(\"Front\")
		elif %MapNode.is_blocked(target):
			self.up()
		else:
			self.bonk()
	#self.forward()
		
	if event.is_action_pressed(\"Bwd\"):
		self.backward()
	if event.is_action_pressed(\"Left\"):
		self.left()
	if event.is_action_pressed(\"Right\"):
		self.right()
	if event.is_action_pressed(\"Up\"):
		self.up()
	if event.is_action_pressed(\"Down\"):
		self.down()
	if event.is_action_pressed(\"RollLeft\"):
		if %MapNode.is_walkable(self.target_pos(\"RollLeft\")):
			self.roll_left()
		else:
			pass # self.bonk(\"RollLeft\")
	if event.is_action_pressed(\"RollRight\"):
		if %MapNode.is_walkable(self.target_pos(\"RollRight\")):
			self.roll_right()
		else:
			pass # self.bonk(\"RollRight\")
		
	if event.is_action_pressed(\"Reset\"):
		self.reset()
	if event.is_action_pressed(\"Interact\"):
		self.bonk()
	if event.is_action_pressed(\"Switch\"):
		$Torch.visible = not $Torch.visible
"

[sub_resource type="GDScript" id="GDScript_n7b7l"]
resource_name = "Looking"
script/source = "extends Camera3D

var max_angle = 90;
var turning_speed = 90;  #  deg per second

var rest_horizontal = self.rotation_degrees.y;
var rest_vertical = self.rotation_degrees.x;
var target_angle_horizontal = 0.;
var target_angle_vertical = 0.;

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	var angle = delta * turning_speed;
	
	self.rotation_degrees.y += clamp(target_angle_horizontal - self.rotation_degrees.y +rest_horizontal, -angle, angle);
	self.rotation_degrees.x += clamp(target_angle_vertical - self.rotation_degrees.x +rest_vertical, -angle, angle);

func _input(_event):
	target_angle_vertical = 0.;
	if Input.is_action_pressed(\"LookDown\"):
		target_angle_vertical -= max_angle;
	if Input.is_action_pressed(\"LookUp\"):
		target_angle_vertical += max_angle;

	target_angle_horizontal = 0.;
	if Input.is_action_pressed(\"LookLeft\"):
		target_angle_horizontal += max_angle;
	if Input.is_action_pressed(\"LookRight\"):
		target_angle_horizontal -= max_angle;
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_2bkjy"]

[sub_resource type="TorusMesh" id="TorusMesh_2ilek"]
inner_radius = 0.2
outer_radius = 0.6

[sub_resource type="GDScript" id="GDScript_jjcpd"]
resource_name = "update_pos"
script/source = "extends Label


# Called when the node enters the scene tree for the first time.
func _on_probe_probe_on_position(probe_name, _pos, x, y, z):
	self.text = \"%s: [%s, %s, %s]\" % [probe_name, x, y, z];
"

[sub_resource type="GDScript" id="GDScript_ahata"]
script/source = "extends Control

func _input(event):
	if event.is_action_pressed(\"Help\"):
		self.visible = !self.visible;
"

[sub_resource type="GDScript" id="GDScript_h6v0m"]
resource_name = "update_minimap"
script/source = "extends MiniMapControl

func _on_probe_probe_on_position(_name, pos, _x, _y, _z):
	self.set_map_square(pos, true);
	
	var front = %Probe.target_pos(\"Front\");
	self.set_map_square(front, %MapNode.is_walkable(front));
	
	self.set_origin(pos);
"

[node name="Node3D" type="Node3D"]
script = ExtResource("1_7nmve")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.253454, -0.551662, -0.794626, 0.967347, 0.144541, 0.208199, 0, -0.821448, 0.570284, 0, 0, 0)
visible = false

[node name="Probe" type="Probe" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_lisen")

[node name="Camera" type="Camera3D" parent="Probe"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)
current = true
fov = 120.0
script = SubResource("GDScript_n7b7l")

[node name="Mesh" type="MeshInstance3D" parent="Probe"]
transform = Transform3D(-4.37114e-08, 0.7, -4.37114e-08, 0, -3.0598e-08, -1, -1, -3.0598e-08, 1.91069e-15, 0, 0, 0)
mesh = SubResource("CapsuleMesh_2bkjy")

[node name="Tail" type="MeshInstance3D" parent="Probe"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0.5, 0, 0)
mesh = SubResource("TorusMesh_2ilek")

[node name="Torch" type="SpotLight3D" parent="Probe"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)
light_color = Color(1.49205e-06, 0.786021, 0.18892, 1)
spot_range = 10.0
spot_angle = 60.0

[node name="TopView" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 15, 0)
visible = false

[node name="MapNode" type="MapNode" parent="."]
command_string = "3l2l1"
unique_name_in_owner = true
material_override = ExtResource("2_f5y5r")

[node name="LabelPos" type="Label" parent="."]
offset_left = 35.0
offset_top = 40.0
offset_right = 280.0
offset_bottom = 63.0
text = "Pos:
"
script = SubResource("GDScript_jjcpd")

[node name="LabelControlSwitch" type="Label" parent="."]
offset_left = 862.0
offset_top = 29.0
offset_right = 948.0
offset_bottom = 52.0
text = "Controls: H"
horizontal_alignment = 2

[node name="Controls" type="Control" parent="."]
visible = false
layout_mode = 3
anchors_preset = 0
offset_left = 841.0
offset_top = 19.0
offset_right = 1132.0
offset_bottom = 288.0
script = SubResource("GDScript_ahata")

[node name="LabelControlsRich" type="RichTextLabel" parent="Controls"]
layout_mode = 0
offset_left = 24.0
offset_top = 55.0
offset_right = 212.0
offset_bottom = 245.0
text = "Turn:			 	W, S, A, D
Roll:				Q, E
Forward: 		F, Space
Backward:		X
Interact:			Z
Lights:			Tab
Reset pos:		R"

[node name="Line2D" type="Line2D" parent="Controls"]
position = Vector2(24, 55)
points = PackedVector2Array(0, 0, 200, 0)
width = 2.0

[node name="MiniMap" type="MarginContainer" parent="."]
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -472.0
offset_top = -327.0
offset_right = -38.0
offset_bottom = -35.0
grow_horizontal = 0
grow_vertical = 0

[node name="MarginContainer" type="MarginContainer" parent="MiniMap"]
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="MiniMapControl" type="MiniMapControl" parent="MiniMap/MarginContainer"]
field_size = 20
clip_contents = true
layout_mode = 2
script = SubResource("GDScript_h6v0m")

[node name="Border" type="NinePatchRect" parent="MiniMap"]
layout_mode = 2
texture = ExtResource("3_jycee")
region_rect = Rect2(3.5968, 2.86662, 122.834, 86.2133)
patch_margin_left = 18
patch_margin_top = 19
patch_margin_right = 20
patch_margin_bottom = 20

[node name="TextureRect" type="TextureRect" parent="MiniMap"]
layout_direction = 1
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("4_nk2py")

[connection signal="probe_on_position" from="Probe" to="LabelPos" method="_on_probe_probe_on_position"]
[connection signal="probe_on_position" from="Probe" to="MiniMap/MarginContainer/MiniMapControl" method="_on_probe_probe_on_position"]
